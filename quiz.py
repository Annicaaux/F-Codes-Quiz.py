import streamlit as st
import pandas as pd
import random
from datetime import datetime
import time

# Page config
st.set_page_config(
    page_title="üå≤ Klinische Psychologie Lernwald",
    page_icon="üå≤",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS f√ºr Wald-Theme
st.markdown("""
<style>
    .main {
        background: linear-gradient(135deg, #2d5016 0%, #3e7b1f 50%, #4a7c2a 100%);
        background-attachment: fixed;
    }
    
    .stApp {
        background: linear-gradient(135deg, #2d5016 0%, #3e7b1f 50%, #4a7c2a 100%);
    }
    
    .forest-card {
        background: rgba(76, 175, 80, 0.1);
        padding: 20px;
        border-radius: 15px;
        border: 2px solid #4CAF50;
        margin: 10px 0;
        backdrop-filter: blur(10px);
    }
    
    .tree-progress {
        background: linear-gradient(90deg, #2e7d32, #4caf50, #81c784);
        border-radius: 20px;
        padding: 10px;
        text-align: center;
        color: white;
        font-weight: bold;
        margin: 10px 0;
    }
    
    .leaf-badge {
        background: #4CAF50;
        color: white;
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        margin: 2px;
        display: inline-block;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #1b5e20, #2e7d32);
    }
    
    h1, h2, h3 {
        color: #2e7d32 !important;
    }
    
    .stSelectbox > div > div {
        background-color: rgba(46, 125, 50, 0.1);
        border: 2px solid #4CAF50;
    }
    
    .forest-emoji {
        font-size: 2em;
        margin: 0 10px;
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'total_points' not in st.session_state:
    st.session_state.total_points = 0
if 'correct_answers' not in st.session_state:
    st.session_state.correct_answers = 0
if 'total_questions' not in st.session_state:
    st.session_state.total_questions = 0
if 'current_level' not in st.session_state:
    st.session_state.current_level = 1
if 'unlocked_areas' not in st.session_state:
    st.session_state.unlocked_areas = ['Einf√ºhrung']

# ICD-10 F-Diagnosen Datenbank
icd_10_data = {
    "F00-F09": {
        "name": "Organische psychische St√∂rungen",
        "codes": {
            "F00": "Demenz bei Alzheimer-Krankheit",
            "F01": "Vaskul√§re Demenz",
            "F02": "Demenz bei anderenorts klassifizierten Krankheiten",
            "F03": "Nicht n√§her bezeichnete Demenz",
            "F04": "Organisches amnestisches Syndrom",
            "F05": "Delir",
            "F06": "Andere psychische St√∂rungen aufgrund einer Sch√§digung oder Funktionsst√∂rung des Gehirns",
            "F07": "Pers√∂nlichkeits- und Verhaltensst√∂rung aufgrund einer Krankheit",
            "F09": "Nicht n√§her bezeichnete organische oder symptomatische psychische St√∂rung"
        }
    },
    "F10-F19": {
        "name": "Psychische und Verhaltensst√∂rungen durch psychotrope Substanzen",
        "codes": {
            "F10": "Alkohol",
            "F11": "Opioide",
            "F12": "Cannabinoide",
            "F13": "Sedativa oder Hypnotika",
            "F14": "Kokain",
            "F15": "Andere Stimulanzien",
            "F16": "Halluzinogene",
            "F17": "Tabak",
            "F18": "Fl√ºchtige L√∂sungsmittel",
            "F19": "Multipler Substanzgebrauch"
        }
    },
    "F20-F29": {
        "name": "Schizophrenie, schizotype und wahnhafte St√∂rungen",
        "codes": {
            "F20": "Schizophrenie",
            "F21": "Schizotype St√∂rung",
            "F22": "Anhaltende wahnhafte St√∂rungen",
            "F23": "Akute vor√ºbergehende psychotische St√∂rungen",
            "F24": "Induzierte wahnhafte St√∂rung",
            "F25": "Schizoaffektive St√∂rungen",
            "F28": "Sonstige nichtorganische psychotische St√∂rungen",
            "F29": "Nicht n√§her bezeichnete nichtorganische Psychose"
        }
    },
    "F30-F39": {
        "name": "Affektive St√∂rungen",
        "codes": {
            "F30": "Manische Episode",
            "F31": "Bipolare affektive St√∂rung",
            "F32": "Depressive Episode",
            "F33": "Rezidivierende depressive St√∂rung",
            "F34": "Anhaltende affektive St√∂rungen",
            "F38": "Andere affektive St√∂rungen",
            "F39": "Nicht n√§her bezeichnete affektive St√∂rung"
        }
    },
    "F40-F48": {
        "name": "Neurotische, Belastungs- und somatoforme St√∂rungen",
        "codes": {
            "F40": "Phobische St√∂rungen",
            "F41": "Andere Angstst√∂rungen",
            "F42": "Zwangsst√∂rung",
            "F43": "Reaktionen auf schwere Belastungen und Anpassungsst√∂rungen",
            "F44": "Dissoziative St√∂rungen",
            "F45": "Somatoforme St√∂rungen",
            "F48": "Andere neurotische St√∂rungen"
        }
    },
    "F50-F59": {
        "name": "Verhaltensauff√§lligkeiten mit k√∂rperlichen St√∂rungen",
        "codes": {
            "F50": "Essst√∂rungen",
            "F51": "Nichtorganische Schlafst√∂rungen",
            "F52": "Sexuelle Funktionsst√∂rungen",
            "F53": "Psychische oder Verhaltensst√∂rungen im Wochenbett",
            "F54": "Psychologische Faktoren oder Verhaltensfaktoren bei anderenorts klassifizierten Krankheiten",
            "F55": "Sch√§dlicher Gebrauch von nichtabh√§ngigkeitserzeugenden Substanzen",
            "F59": "Nicht n√§her bezeichnete Verhaltensauff√§lligkeiten mit k√∂rperlichen St√∂rungen"
        }
    },
    "F60-F69": {
        "name": "Pers√∂nlichkeits- und Verhaltensst√∂rungen",
        "codes": {
            "F60": "Spezifische Pers√∂nlichkeitsst√∂rungen",
            "F61": "Kombinierte und andere Pers√∂nlichkeitsst√∂rungen",
            "F62": "Andauernde Pers√∂nlichkeits√§nderungen",
            "F63": "Abnorme Gewohnheiten und St√∂rungen der Impulskontrolle",
            "F64": "St√∂rungen der Geschlechtsidentit√§t",
            "F65": "St√∂rungen der Sexualpr√§ferenz",
            "F66": "Psychische und Verhaltensst√∂rungen in Verbindung mit der sexuellen Entwicklung",
            "F68": "Andere Pers√∂nlichkeits- und Verhaltensst√∂rungen",
            "F69": "Nicht n√§her bezeichnete Pers√∂nlichkeits- und Verhaltensst√∂rung"
        }
    }
}

# St√∂rungsbilder mit Fallbeispielen
stoerungsbilder = {
    "Depression": {
        "emoji": "üåßÔ∏è",
        "patient": "Maria, 34 Jahre",
        "geschichte": "Maria f√ºhlt sich seit Monaten niedergeschlagen, hat keine Energie mehr f√ºr Aktivit√§ten, die ihr fr√ºher Freude bereitet haben. Sie schl√§ft schlecht und gr√ºbelt viel.",
        "icd": "F32/F33",
        "symptome": ["Gedr√ºckte Stimmung", "Interessensverlust", "Antriebsmangel", "Schlafst√∂rungen", "Schuldgef√ºhle"],
        "gedankenpalast": "Stelle dir einen dunklen Wald vor, in dem die B√§ume ihre Bl√§tter verloren haben. Maria wandelt durch diesen Wald und findet schwer den Weg hinaus."
    },
    "Angstst√∂rung": {
        "emoji": "üò∞",
        "patient": "Thomas, 28 Jahre",
        "geschichte": "Thomas bekommt pl√∂tzlich Herzrasen, Schwei√üausbr√ºche und das Gef√ºhl zu ersticken, wenn er in Menschenmengen ist. Er meidet deshalb √∂ffentliche Verkehrsmittel.",
        "icd": "F40/F41",
        "symptome": ["Herzrasen", "Schwei√üausbr√ºche", "Atemnot", "Vermeidungsverhalten", "Panikattacken"],
        "gedankenpalast": "Stell dir vor, Thomas steht vor einem dichten Dornengestr√ºpp im Wald. Jeder Schritt vorw√§rts scheint gef√§hrlich - das ist seine Angst."
    },
    "Schizophrenie": {
        "emoji": "üé≠",
        "patient": "Andreas, 22 Jahre",
        "geschichte": "Andreas h√∂rt Stimmen, die andere nicht h√∂ren k√∂nnen. Er glaubt, dass seine Gedanken von anderen gelesen werden k√∂nnen und zieht sich zunehmend zur√ºck.",
        "icd": "F20",
        "symptome": ["Halluzinationen", "Wahnvorstellungen", "Denkst√∂rungen", "Sozialer R√ºckzug", "Ich-St√∂rungen"],
        "gedankenpalast": "Andreas wandelt durch einen Zauberwald, wo die Realit√§t verschwimmt - B√§ume sprechen, Schatten haben eigene Stimmen."
    },
    "Bipolare St√∂rung": {
        "emoji": "‚ö°",
        "patient": "Sabine, 31 Jahre",
        "geschichte": "Sabine erlebt Phasen extremer Hochstimmung, in denen sie kaum schl√§ft und viel Geld ausgibt, gefolgt von tiefen depressiven Episoden.",
        "icd": "F31",
        "symptome": ["Manische Episoden", "Depressive Episoden", "Schlafmangel", "Gr√∂√üenwahn", "Stimmungsschwankungen"],
        "gedankenpalast": "Sabines Wald wechselt zwischen strahlendem Sonnenschein mit bunten Blumen und dunklen Gewittern mit Sturm."
    }
}

# Pr√§ventions- und Rehabilitationsthemen
praevention_reha = {
    "Motivational Interviewing": {
        "emoji": "üí¨",
        "prinzipien": ["Empathie ausdr√ºcken", "Diskrepanzen entwickeln", "Widerstand vermeiden", "Selbstwirksamkeit f√∂rdern"],
        "techniken": ["Offene Fragen", "Aktives Zuh√∂ren", "Reflektieren", "Zusammenfassen"]
    },
    "PACE-Modell": {
        "emoji": "üèÉ",
        "bedeutung": {
            "P": "Partnership (Partnerschaft)",
            "A": "Acceptance (Akzeptanz)",
            "C": "Curiosity (Neugier)",
            "E": "Empathy (Empathie)"
        }
    },
    "Entscheidungswaage": {
        "emoji": "‚öñÔ∏è",
        "beschreibung": "Tool zur Motivationsf√∂rderung durch Abw√§gen von Vor- und Nachteilen einer Verhaltens√§nderung",
        "anwendung": "Patient listet Pro und Contra einer Ver√§nderung auf"
    },
    "Universelle Pr√§vention": {
        "emoji": "üõ°Ô∏è",
        "zielgruppe": "Gesamtbev√∂lkerung",
        "beispiele": ["Aufkl√§rungskampagnen", "Gesundheitsf√∂rderung in Schulen", "Stressmanagement-Programme"]
    },
    "Rehabilitation": {
        "emoji": "üîÑ",
        "phasen": ["Akutbehandlung", "Postakute Reha", "Langzeitrehabilitation"],
        "ziele": ["Funktionsverbesserung", "Teilhabe am gesellschaftlichen Leben", "R√ºckfallprophylaxe"]
    }
}

def get_user_level():
    """Berechne User Level basierend auf Punkten"""
    points = st.session_state.total_points
    if points < 100:
        return 1, "üå± Setzling"
    elif points < 300:
        return 2, "üåø Jungpflanze"
    elif points < 600:
        return 3, "üå≥ Junger Baum"
    elif points < 1000:
        return 4, "üå≤ Starker Baum"
    else:
        return 5, "üåü Weiser Waldgeist"

def main():
    # Sidebar Navigation
    st.sidebar.markdown("## üå≤ Lernwald Navigation")
    
    # User Progress
    level, level_name = get_user_level()
    st.sidebar.markdown(f"**Level:** {level_name}")
    st.sidebar.markdown(f"**Punkte:** {st.session_state.total_points} üçÉ")
    
    if st.session_state.total_questions > 0:
        accuracy = (st.session_state.correct_answers / st.session_state.total_questions) * 100
        st.sidebar.markdown(f"**Genauigkeit:** {accuracy:.1f}%")
    
    st.sidebar.progress(min(st.session_state.total_points / 1000, 1.0))
    
    # Main Navigation
    page = st.sidebar.selectbox(
        "W√§hle deinen Lernpfad:",
        [
            "üè† Waldlichtung (Start)",
            "üìö ICD-10 Kodierungsquiz",
            "üé≠ St√∂rungsbilder Gedankenpalast",
            "üß† Diagnostische Kriterien Quiz",
            "üõ°Ô∏è Pr√§vention & Rehabilitation",
            "üìä Lernfortschritt"
        ]
    )
    
    # Main Content
    if page == "üè† Waldlichtung (Start)":
        show_home_page()
    elif page == "üìö ICD-10 Kodierungsquiz":
        show_icd_quiz()
    elif page == "üé≠ St√∂rungsbilder Gedankenpalast":
        show_stoerungsbilder()
    elif page == "üß† Diagnostische Kriterien Quiz":
        show_criteria_quiz()
    elif page == "üõ°Ô∏è Pr√§vention & Rehabilitation":
        show_prevention_rehab()
    elif page == "üìä Lernfortschritt":
        show_progress()

def show_home_page():
    st.title("üå≤ Willkommen im Klinischen Psychologie Lernwald!")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown("### üåø Dein Lernwald wartet auf dich!")
        st.markdown("""
        Begib dich auf eine Reise durch den Wald des Wissens und entdecke die Geheimnisse 
        der klinischen Psychologie. Jeder Baum steht f√ºr ein Lerngebiet, jedes Blatt f√ºr 
        gelerntes Wissen.
        """)
    
    # Lernbereiche Overview
    st.markdown("## üå≥ Deine Lernbereiche")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        ### üìö ICD-10 Kodierung
        Lerne die F-Diagnosen spielerisch auswendig. Wie ein F√∂rster, der jeden Baum 
        in seinem Wald kennt, wirst du jeden Code beherrschen.
        
        ### üé≠ St√∂rungsbilder
        Wandle durch den Gedankenpalast und begegne verschiedenen Patienten. 
        Jeder hat seine eigene Geschichte im Wald.
        """)
    
    with col2:
        st.markdown("""
        ### üß† Diagnostische Kriterien
        Teste dein Wissen √ºber die Kriterien verschiedener St√∂rungen. 
        Wie ein Spurenleser im Wald erkennst du die Zeichen.
        
        ### üõ°Ô∏è Pr√§vention & Rehabilitation
        Entdecke, wie man Menschen hilft, ihren Weg aus dem dunklen Wald zu finden 
        und gesund zu bleiben.
        """)
    
    # T√§gliche Herausforderung
    st.markdown("## üéØ Heutige Waldmission")
    
    daily_challenge = random.choice([
        "Lerne 5 neue ICD-10 Codes üìö",
        "Erkunde 2 St√∂rungsbilder im Gedankenpalast üé≠",
        "Beantworte 10 Quizfragen richtig üß†",
        "Entdecke ein Pr√§ventionskonzept üõ°Ô∏è"
    ])
    
    st.info(f"**Heute:** {daily_challenge}")
    
    # Motivational Quote
    quotes = [
        "Jeder Baum war einmal ein Samen. Jeder Experte war einmal ein Anf√§nger. üå±",
        "Im Wald des Wissens gibt es immer neue Pfade zu entdecken. üå≤",
        "Wie ein Baum w√§chst auch Wissen mit der Zeit und Pflege. üåø",
        "Der beste Zeitpunkt, einen Baum zu pflanzen, war vor 20 Jahren. Der zweitbeste ist jetzt. üå≥"
    ]
    
    st.success(random.choice(quotes))

def show_icd_quiz():
    st.title("üìö ICD-10 Kodierungsquiz")
    st.markdown("*Wie ein F√∂rster seine B√§ume kennst du bald jeden Code!*")
    
    # Quiz Mode Selection
    quiz_mode = st.selectbox(
        "W√§hle deinen Lernmodus:",
        ["Code ‚Üí St√∂rung", "St√∂rung ‚Üí Code", "Gemischt"]
    )
    
    # Category Selection
    categories = list(icd_10_data.keys())
    selected_category = st.selectbox("W√§hle eine Kategorie:", ["Alle"] + categories)
    
    if st.button("üéØ Neue Quizfrage generieren"):
        generate_icd_quiz_question(quiz_mode, selected_category)
    
    # Show current question if exists
    if 'current_icd_question' in st.session_state:
        show_current_icd_question()

def generate_icd_quiz_question(mode, category):
    """Generiere eine neue ICD-10 Quiz Frage"""
    
    # Select codes based on category
    if category == "Alle":
        all_codes = {}
        for cat_data in icd_10_data.values():
            all_codes.update(cat_data["codes"])
    else:
        all_codes = icd_10_data[category]["codes"]
    
    # Random code selection
    code = random.choice(list(all_codes.keys()))
    disorder = all_codes[code]
    
    # Generate question based on mode
    if mode == "Code ‚Üí St√∂rung":
        question = f"Was bedeutet der ICD-10 Code **{code}**?"
        correct_answer = disorder
        
        # Generate wrong answers
        wrong_answers = random.sample([d for c, d in all_codes.items() if c != code], 3)
        options = [correct_answer] + wrong_answers
        
    elif mode == "St√∂rung ‚Üí Code":
        question = f"Welcher ICD-10 Code geh√∂rt zu: **{disorder}**?"
        correct_answer = code
        
        # Generate wrong codes
        wrong_answers = random.sample([c for c in all_codes.keys() if c != code], 3)
        options = [correct_answer] + wrong_answers
    
    else:  # Gemischt
        if random.choice([True, False]):
            question = f"Was bedeutet der ICD-10 Code **{code}**?"
            correct_answer = disorder
            wrong_answers = random.sample([d for c, d in all_codes.items() if c != code], 3)
        else:
            question = f"Welcher ICD-10 Code geh√∂rt zu: **{disorder}**?"
            correct_answer = code
            wrong_answers = random.sample([c for c in all_codes.keys() if c != code], 3)
        
        options = [correct_answer] + wrong_answers
    
    random.shuffle(options)
    
    st.session_state.current_icd_question = {
        "question": question,
        "options": options,
        "correct_answer": correct_answer,
        "answered": False
    }

def show_current_icd_question():
    """Zeige die aktuelle ICD Quiz Frage"""
    q = st.session_state.current_icd_question
    
    st.markdown("### üåø Quiz Frage")
    st.markdown(q["question"])
    
    if not q["answered"]:
        selected_option = st.radio("W√§hle deine Antwort:", q["options"])
        
        if st.button("üçÉ Antwort einreichen"):
            q["answered"] = True
            st.session_state.total_questions += 1
            
            if selected_option == q["correct_answer"]:
                st.session_state.correct_answers += 1
                st.session_state.total_points += 10
                st.success(f"üå≥ Richtig! +10 Punkte. Die Antwort ist: {q['correct_answer']}")
                st.balloons()
            else:
                st.error(f"üçÇ Falsch. Die richtige Antwort ist: {q['correct_answer']}")
            
            # Memory Palace Tip
            st.info("üí° **Eselsbr√ºcke:** Stelle dir vor, wie diese St√∂rung als charakteristischer Baum in deinem Ged√§chtniswald w√§chst!")
    
    else:
        st.info(f"Antwort: {q['correct_answer']}")

def show_stoerungsbilder():
    st.title("üé≠ St√∂rungsbilder Gedankenpalast")
    st.markdown("*Wandle durch den Wald der Geschichten und lerne durch Patienten-Begegnungen*")
    
    # Select disorder
    selected_disorder = st.selectbox(
        "W√§hle eine St√∂rung zum Erkunden:",
        list(stoerungsbilder.keys())
    )
    
    if selected_disorder:
        disorder_data = stoerungsbilder[selected_disorder]
        
        # Create a visual patient card
        st.markdown(f"## {disorder_data['emoji']} {selected_disorder}")
        
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown("### üë§ Patient")
            st.markdown(f"**Name:** {disorder_data['patient']}")
            st.markdown(f"**ICD-10:** {disorder_data['icd']}")
            
            st.markdown("### üè∑Ô∏è Symptome")
            for symptom in disorder_data['symptome']:
                st.markdown(f"üçÉ {symptom}")
        
        with col2:
            st.markdown("### üìñ Geschichte")
            st.markdown(disorder_data['geschichte'])
            
            st.markdown("### üè∞ Gedankenpalast")
            st.info(disorder_data['gedankenpalast'])
        
        # Interactive elements
        st.markdown("### üéØ Lernaktivit√§ten")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üß† Symptome merken"):
                st.success("Pr√§ge dir die Symptome ein, indem du sie dem Patienten in deinem Gedankenpalast zuordnest!")
                st.session_state.total_points += 5
        
        with col2:
            if st.button("üé≠ Rollenspiel"):
                st.success("Stelle dir vor, du f√ºhrst ein Gespr√§ch mit diesem Patienten. Was w√ºrdest du fragen?")
                st.session_state.total_points += 5
        
        with col3:
            if st.button("üîç Differentialdiagnose"):
                st.success("√úberlege, welche anderen St√∂rungen √§hnliche Symptome haben k√∂nnten!")
                st.session_state.total_points += 5
        
        # Quiz about this disorder
        if st.button("üéØ Quiz zu dieser St√∂rung"):
            generate_disorder_quiz(selected_disorder, disorder_data)

def generate_disorder_quiz(disorder_name, disorder_data):
    """Generiere Quiz Fragen zu einer spezifischen St√∂rung"""
    
    questions = [
        {
            "question": f"Welcher ICD-10 Code geh√∂rt zu {disorder_name}?",
            "correct": disorder_data['icd'],
            "wrong": ["F43.1", "F25.0", "F61.2"]
        },
        {
            "question": f"Welches Symptom geh√∂rt NICHT zu {disorder_name}?",
            "correct": "Wahnvorstellungen" if disorder_name != "Schizophrenie" else "Euphorie",
            "wrong": disorder_data['symptome'][:3]
        }
    ]
    
    selected_q = random.choice(questions)
    options = [selected_q["correct"]] + selected_q["wrong"]
    random.shuffle(options)
    
    st.markdown("### üåø Spontanes Quiz!")
    st.markdown(selected_q["question"])
    
    answer = st.radio("Deine Antwort:", options, key=f"quiz_{disorder_name}")
    
    if st.button("Antworten", key=f"submit_{disorder_name}"):
        if answer == selected_q["correct"]:
            st.success("üå≥ Richtig! +15 Punkte")
            st.session_state.total_points += 15
            st.session_state.correct_answers += 1
        else:
            st.error(f"üçÇ Falsch. Richtig w√§re: {selected_q['correct']}")
        st.session_state.total_questions += 1

def show_criteria_quiz():
    st.title("üß† Diagnostische Kriterien Quiz")
    st.markdown("*Erkenne die Zeichen wie ein Spurenleser im Wald*")
    
    # Hier w√ºrdest du detaillierte diagnostische Kriterien implementieren
    st.info("üöß Dieser Bereich wird erweitert mit detaillierten DSM-5 und ICD-10 Kriterien!")
    
    # Beispiel f√ºr Kriterien-basierte Fragen
    st.markdown("### üéØ Beispiel: Depression Kriterien")
    
    st.markdown("""
    **Hauptsymptome der Depression (ICD-10):**
    - Gedr√ºckte, depressive Stimmung
    - Interessens- oder Freudeverlust
    - Antriebsmangel oder erh√∂hte Erm√ºdbarkeit
    
    **Zusatzsymptome:**
    - Verminderte Konzentration
    - Vermindertes Selbstwertgef√ºhl
    - Schuldgef√ºhle
    - Negative Zukunftsperspektiven
    - Suizidgedanken
    - Schlafst√∂rungen
    - Verminderter Appetit
    """)
    
    if st.button("üéØ Kriterien-Quiz starten"):
        st.success("Quiz-Funktion wird implementiert! +5 Punkte f√ºr's Ausprobieren")
        st.session_state.total_points += 5

def show_prevention_rehab():
    st.title("üõ°Ô∏è Pr√§vention & Rehabilitation")
    st.markdown("*Hilf Menschen, ihren Weg aus dem dunklen Wald zu finden*")
    
    # Topic Selection
    topic = st.selectbox(
        "W√§hle ein Thema:",
        list(praevention_reha.keys())
    )
    
    if topic:
        topic_data = praevention_reha[topic]
        
        st.markdown(f"## {topic_data['emoji']} {topic}")

    if topic == "Motivational Interviewing":
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### üåø Prinzipien")
            for prinzip in topic_data['prinzipien']:
                st.markdown(f"üçÉ {prinzip}")

        with col2:
            st.markdown("### üõ†Ô∏è Techniken")
            for technik in topic_data['techniken']:
                st.markdown(f"ü™µ {technik}")
    
        st.session_state.total_points += 5

    elif topic == "PACE-Modell":
        st.markdown("### üå± Bedeutung der Buchstaben:")
        for key, val in topic_data['bedeutung'].items():
            st.markdown(f"**{key}** ‚Äì {val}")
        st.session_state.total_points += 5

    elif topic == "Entscheidungswaage":
        st.markdown("### ‚öñÔ∏è Beschreibung:")
        st.markdown(topic_data['beschreibung'])
        st.markdown("### üìù Anwendung:")
        st.markdown(topic_data['anwendung'])
        st.session_state.total_points += 5

    elif topic == "Universelle Pr√§vention":
        st.markdown("### üßç‚Äç‚ôÇÔ∏è Zielgruppe:")
        st.markdown(topic_data['zielgruppe'])
        st.markdown("### üß∞ Beispiele:")
        for bsp in topic_data['beispiele']:
            st.markdown(f"üçÉ {bsp}")
        st.session_state.total_points += 5

    elif topic == "Rehabilitation":
        st.markdown("### üîÅ Phasen:")
        for phase in topic_data['phasen']:
            st.markdown(f"üåø {phase}")
        st.markdown("### üéØ Ziele:")
        for ziel in topic_data['ziele']:
            st.markdown(f"üçÉ {ziel}")
        st.session_state.total_points += 5

        st.success("üå≥ Thema erkundet! +5 Punkte")

def show_progress():
    st.title("üìä Dein Lernfortschritt im Wald")
    st.markdown("*Hier kannst du deinen Weg durch den Wald nachvollziehen*")

    level, level_name = get_user_level()
    st.markdown(f"## Dein aktuelles Level: {level_name}")
    st.markdown(f"**Gesamtpunkte:** {st.session_state.total_points} üçÉ")
    st.markdown(f"**Beantwortete Fragen:** {st.session_state.total_questions}")
    st.markdown(f"**Richtige Antworten:** {st.session_state.correct_answers}")

    if st.session_state.total_questions > 0:
        accuracy = (st.session_state.correct_answers / st.session_state.total_questions) * 100
        st.markdown(f"**Treffsicherheit:** {accuracy:.1f}%")

    # Visuelle Fortschrittsanzeige
    st.markdown("### üåø Fortschrittsbalken")
    st.progress(min(st.session_state.total_points / 1000, 1.0))

    st.markdown("### üçÇ Gelernte Inhalte")
    learned_modules = []
    if st.session_state.total_points > 10:
        learned_modules.append("üìö ICD-10 Quiz")
    if st.session_state.total_points > 20:
        learned_modules.append("üé≠ Gedankenpalast")
    if st.session_state.total_points > 30:
        learned_modules.append("üß† Kriterien-Quiz")
    if st.session_state.total_points > 40:
        learned_modules.append("üõ°Ô∏è Pr√§ventionswissen")

    if learned_modules:
        for module in learned_modules:
            st.markdown(f"‚úÖ {module}")
    else:
        st.info("Noch keine Module abgeschlossen ‚Äì auf in den Lernwald!")

# Starte App
if __name__ == "__main__":
    main()
   

   
